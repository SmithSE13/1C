
#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаКлиенте
Асинх Процедура ПриОткрытии(Отказ)
	
	УстановитьЗначенияПереключателейПоУмолчанию();
	
	Ждать УстановитьПутиСохраненияФайлов();

	Ждать ПрочитатьСохраненныеНастройки();
	
	НастроитьЭлементыФормы();
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ВсегдаСохранятьНастройки Тогда
		СохранитьНастройкиВФайл();
	ИначеЕсли Ждать ВопросАсинх("Сохранить настройки подключения?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		СохранитьНастройкиВФайл();
	Иначе
		УдалитьФайлНастроек();
	КонецЕсли;

	Если ВсегдаСохранятьНастройки Тогда
		// оставляем
	ИначеЕсли Ждать ВопросАсинх("Сохранить файл тела запроса?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		УдалитьФайлТелаЗапроса();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПутьДляСохраненияФайлаНастроекОткрытие(Элемент, СтандартнаяОбработка)
	
	ЗапуститьПриложениеАсинх(ПутьДляСохраненияФайлаНастроек);
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьДляСохраненияФайлаТелаЗапросаОткрытие(Элемент, СтандартнаяОбработка)
	
	ЗапуститьПриложениеАсинх(ПутьДляСохраненияФайлаТелаЗапроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательМоделейПриИзменении(Элемент)

	НастроитьЭлементыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательРежимовПриИзменении(Элемент)
	
	НастроитьЭлементыФормы();
	ОчиститьРеквизитыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательКомандПриИзменении(Элемент)
	
	Если ПереключательКоманд = "completionAsync" Тогда
		ПереключательРежимов = "Промт";
		ПереключательМоделей = "YandexGPTLite";
	КонецЕсли;
	
	НастроитьЭлементыФормы();
	ОчиститьРеквизитыФормы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПолучитьIAMТокен(Команда)
	
	СтруктураСоединениеЗапрос = СформироватьHTTPСоединениеЗапрос("/iam/v1/tokens", Истина);
	Если СтруктураСоединениеЗапрос = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = СтруктураСоединениеЗапрос.Запрос;
	
	Запрос.УстановитьТелоИзСтроки(КоллекциюВJson(Новый Структура("yandexPassportOauthToken", Объект.OAuthТокен)));
	
	Запрос.Заголовки.Вставить("Content-Type", "application/json");
	
	Ответ = ВыполнитьЗапрос("POST", СтруктураСоединениеЗапрос.Соединение, Запрос);
	Если Ответ = Неопределено Тогда
		Возврат;
	ИначеЕсли Ответ.КодСостояния <> 200 Тогда
		ОписаниеОтветаНейросети = Ответ.ПолучитьТелоКакСтроку();
		Возврат;
	КонецЕсли;
	
	СтрокаОтвета = Ответ.ПолучитьТелоКакСтроку();
	
	Данные = JsonВКоллекцию(СтрокаОтвета, Ложь);
	Данные.Свойство("iamToken", Объект.IAMТокен);

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьOAuthТокен(Команда)

	ЗапуститьПриложениеАсинх("https://oauth.yandex.ru/authorize?response_type=token&client_id=1a6990aa636648e9b2ef855fa7bec2fb");

КонецПроцедуры

&НаКлиенте
Асинх Процедура ЗапроситьОтвет(Команда)
	
	ОчиститьСообщения();
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если ПереключательРежимов = "" Тогда
		ПереключательРежимов = "Промт";
	КонецЕсли;
	
	НастроитьЭлементыФормы();
	Элементы.ГруппаОсновныеНастройкиМоделиГенерации.Скрыть();

	ОписаниеЗапросаПользователя = СокрЛП(ОписаниеЗапросаПользователя);
	
	СтруктураСоединениеЗапрос = СформироватьHTTPСоединениеЗапрос("/foundationModels/v1/" + ПереключательКоманд);
	Если СтруктураСоединениеЗапрос = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Запрос = СтруктураСоединениеЗапрос.Запрос;
		
	ФайлПодготовлен = Ждать ЗаполнитьФайлТелаЗапроса();
	Если Не ФайлПодготовлен Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не удалось подготовить файл тела запроса.";
		Сообщение.Поле = "ПутьДляСохраненияФайлаТелаЗапроса";
		Сообщение.УстановитьДанные(ПутьДляСохраненияФайлаТелаЗапроса);
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;

	Запрос.УстановитьТелоИзДвоичныхДанных(Новый ДвоичныеДанные(ПутьДляСохраненияФайлаТелаЗапроса));
	Запрос.Заголовки.Вставить("Content-Type", "application/json");
	Запрос.Заголовки.Вставить("Authorization", "Bearer " + Объект.IAMТокен);
	
	Ответ = ВыполнитьЗапрос("POST", СтруктураСоединениеЗапрос.Соединение, Запрос);
	Если Ответ = Неопределено Тогда
		Возврат;
	ИначеЕсли Ответ.КодСостояния <> 200 Тогда
		ОписаниеОтветаНейросети = Ответ.ПолучитьТелоКакСтроку();
		Возврат;
	КонецЕсли;
	
	Если ПереключательКоманд = "completion" Тогда
		РазобратьОтветКомандыCompletion(JsonВКоллекцию(Ответ.ПолучитьТелоКакСтроку(), Ложь));
	ИначеЕсли ПереключательКоманд = "completionAsync" Тогда
		РазобратьОтветКомандыСompletionAsync(Ответ.ПолучитьТелоКакСтроку());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапросНаПолучениеИнформацииОбОперации(Команда)
	
	Если ОтветКомандыСompletionAsync = "" Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Сначала сделайте запрос.";
		Сообщение.Поле = "ОписаниеЗапросаПользователя";
		Сообщение.УстановитьДанные(ОписаниеЗапросаПользователя);
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	СтруктураСоединениеЗапрос = СформироватьHTTPСоединениеЗапрос("/operations/" + id);
	Если СтруктураСоединениеЗапрос = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Запрос = СтруктураСоединениеЗапрос.Запрос;
	Запрос.Заголовки.Вставить("Authorization", "Bearer " + Объект.IAMТокен);
	
	Ответ = ВыполнитьЗапрос("POST", СтруктураСоединениеЗапрос.Соединение, Запрос);
	Если Ответ = Неопределено Тогда
		Возврат;
	ИначеЕсли Ответ.КодСостояния <> 200 Тогда
		ОписаниеОтветаНейросети = Ответ.ПолучитьТелоКакСтроку();
		Возврат;
	КонецЕсли;

	СоответствиеОтвета = JsonВКоллекцию(Ответ.ПолучитьТелоКакСтроку(), Ложь, Истина);
	done = СоответствиеОтвета.Получить("done");
	Если done = Истина Тогда
		response = СоответствиеОтвета.Получить("response");
		Если response <> Неопределено Тогда
			РазобратьМассивAlternatives(response.Получить("alternatives"), Истина);
		Иначе
			error = СоответствиеОтвета.Получить("error");
			ОписаниеОтветаНейросети = ?(error <> Неопределено, error.Получить("message"), 
												"<Ответ не определён. Необходимо проверить API.>");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция JsonВКоллекцию(JSON, ЭтоФайл, ВСоответствие = Ложь)

	ЧтениеJSON = Новый ЧтениеJSON;
	Если ЭтоФайл Тогда
		ЧтениеJSON.ОткрытьФайл(JSON);
	Иначе
		ЧтениеJSON.УстановитьСтроку(JSON);
	КонецЕсли;
	Коллекция = ПрочитатьJSON(ЧтениеJSON, ВСоответствие);
	ЧтениеJSON.Закрыть();
	
	Возврат Коллекция;
	
КонецФункции

&НаКлиенте
Функция КоллекциюВJson(Коллекция, ЗаписьВФайл = Ложь, ИмяФайла = "")
	
	ЗаписьJSON = Новый ЗаписьJSON;
	Если ЗаписьВФайл Тогда
		ЗаписьJSON.ОткрытьФайл(ИмяФайла);	
	Иначе
		ЗаписьJSON.УстановитьСтроку();
	КонецЕсли;
	
	ЗаписатьJSON(ЗаписьJSON, Коллекция);
		
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

&НаКлиенте
Асинх Функция УстановитьПутиСохраненияФайлов()
	
	ПутьДляСохраненияФайлаТелаЗапроса = Ждать КаталогВременныхФайловАсинх() + "телоЗапроса.json";	
	ПутьДляСохраненияФайлаНастроек 	  = Ждать КаталогВременныхФайловАсинх() + "сохраненныеДанные.json";
	
КонецФункции

&НаКлиенте
Процедура УстановитьЗначенияПереключателейПоУмолчанию()
	
	ПереключательМоделей = "YandexGPTLite";
	ПереключательРежимов = "Промт";
	ПереключательКоманд = "completion";
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиВФайл()

	Структура = Новый Структура;
	Структура.Вставить("ИдентификаторКаталога", Объект.ИдентификаторКаталога);
	Структура.Вставить("OAuthТокен", Объект.OAuthТокен);
	Структура.Вставить("IAMТокен", Объект.IAMТокен);
	Структура.Вставить("ЗадачаДляНейросети", Объект.ЗадачаДляНейросети);
	
	Структура.Вставить("ВсегдаСохранятьНастройки", ВсегдаСохранятьНастройки);
	
	Структура.Вставить("temperature", temperature);
	Структура.Вставить("stream", stream);
	Структура.Вставить("maxTokens", maxTokens);
	Структура.Вставить("ЛогироватьЗапросы", ЛогироватьЗапросы);
	
	Структура.Вставить("ПереключательМоделей", ПереключательМоделей);
	Структура.Вставить("ПереключательРежимов", ПереключательРежимов);
	Структура.Вставить("ПереключательКоманд", ПереключательКоманд);
	
	КоллекциюВJson(Структура, Истина, ПутьДляСохраненияФайлаНастроек);

КонецПроцедуры

&НаКлиенте
Асинх Функция ПрочитатьСохраненныеНастройки()

	Если Ждать ФайлЕсть(ПутьДляСохраненияФайлаНастроек) Тогда
		Структура = JsonВКоллекцию(ПутьДляСохраненияФайлаНастроек, Истина);
		ЗаполнитьЗначенияСвойств(Объект, Структура);
		ЗаполнитьЗначенияСвойств(ЭтаФорма, Структура);
	Иначе
		temperature = 0.1;
		maxTokens = "1000";
	КонецЕсли;

КонецФункции

&НаКлиенте
Асинх Функция ЗаполнитьФайлТелаЗапроса()

	Данные = ПодготовитьСтруктуруДанныхСompletionOptions(Новый Структура);
	СформироватьMessages(Данные);	
	Ждать КоллекциюВJson(Данные, Истина, ПутьДляСохраненияФайлаТелаЗапроса);
	
	Возврат Ждать ФайлЕсть(ПутьДляСохраненияФайлаТелаЗапроса);
	
КонецФункции

&НаКлиенте
Асинх Процедура УдалитьФайлТелаЗапроса()

	Если Ждать ФайлЕсть(ПутьДляСохраненияФайлаТелаЗапроса) Тогда
		УдалитьФайлыАсинх(ПутьДляСохраненияФайлаТелаЗапроса);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Асинх Процедура УдалитьФайлНастроек()
	
	Если Ждать ФайлЕсть(ПутьДляСохраненияФайлаНастроек) Тогда
		УдалитьФайлыАсинх(ПутьДляСохраненияФайлаНастроек);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Асинх Функция ФайлЕсть(ИмяФайла)

	Файл = Новый Файл(ИмяФайла);
	ФайлЕсть = Ждать Файл.СуществуетАсинх();
	Возврат ФайлЕсть;
	
КонецФункции

&НаКлиенте
Процедура НастроитьЭлементыФормы()

	Если Не ЗначениеЗаполнено(Объект.ИдентификаторКаталога) 
					Или Не ЗначениеЗаполнено(Объект.OAuthТокен) 
						Или Не ЗначениеЗаполнено(Объект.IAMТокен) Тогда	
		Элементы.ГруппаАвторизация.Показать();
	Иначе
		Элементы.ГруппаАвторизация.Скрыть();
	КонецЕсли;

	Если ПереключательМоделей = "КраткийПересказ" Тогда
		Элементы.ОписаниеЗапросаПользователя.Заголовок = "Статья к пересказу";
		ПереключательРежимов = "";
		Элементы.ПереключательРежимов.Доступность = Ложь;
		Элементы.ЗадачаДляНейросети.Видимость = Ложь;
		Элементы.ДекорацияМодель.Заголовок = Элементы.ПереключательМоделей.СписокВыбора.НайтиПоЗначению(ПереключательМоделей);
		Элементы.ДекорацияРежим.Заголовок = "";
	ИначеЕсли ПереключательМоделей = "YandexGPTLite" Тогда
		Элементы.ОписаниеЗапросаПользователя.Заголовок = "Запрос пользователя";
		Элементы.ПереключательМоделей.Доступность = Не ПереключательКоманд = "completionAsync";
		Элементы.ПереключательРежимов.Доступность = Не ПереключательКоманд = "completionAsync";
		Элементы.ЗадачаДляНейросети.Видимость = Истина;
		Элементы.ДекорацияМодель.Заголовок = Элементы.ПереключательМоделей.СписокВыбора.НайтиПоЗначению(ПереключательМоделей);
		Элементы.ДекорацияРежим.Заголовок = Элементы.ПереключательРежимов.СписокВыбора.НайтиПоЗначению(ПереключательРежимов);
	КонецЕсли;

	Элементы.ДекорацияКоманда.Заголовок = Элементы.ПереключательКоманд.СписокВыбора.НайтиПоЗначению(ПереключательКоманд);

	Элементы.ГруппаАсинхронно.Видимость = ПереключательКоманд = "completionAsync";
	
	Элементы.ГруппаПараметры.Видимость = Не ПереключательКоманд = "completionAsync";
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРеквизитыФормы()

	messagesПользователяJson = "";
	messageАссистентаJson = "";
	ОтветКомандыСompletionAsync = "";
	
	ОписаниеЗапросаПользователя = "";
	ОписаниеОтветаНейросети = "";

КонецПроцедуры

&НаКлиенте
Функция ПодготовитьСтруктуруДанныхСompletionOptions(Структура)
	
	Если ПереключательМоделей = "YandexGPTLite" Тогда
		МодельСтрокаUri = "/yandexgpt-lite";
	ИначеЕсли ПереключательМоделей = "КраткийПересказ" Тогда
		МодельСтрокаUri = "/summarization";
	КонецЕсли;
	
	Структура.Вставить("modelUri", "gpt://" + Объект.ИдентификаторКаталога + МодельСтрокаUri);
	Структура.Вставить("completionOptions", Новый Структура("stream, temperature, maxTokens", stream, temperature, maxTokens));

	Возврат Структура; 

КонецФункции

&НаКлиенте
Функция ПолучитьСтруктуруРольТекст(Роль, Текст)

	Возврат Новый Структура("role, text", Роль, Текст);

КонецФункции

&НаКлиенте
Функция СформироватьMessages(СтруктураДанных)

	messagesПользователяМассив = Новый Массив;
	
	Если ПереключательМоделей = "YandexGPTLite" Тогда
		
		messagesПользователяМассив.Добавить(ПолучитьСтруктуруРольТекст("system", Объект.ЗадачаДляНейросети));
		
		Если ПереключательРежимов = "Промт" Тогда
			
			messagesПользователяМассив.Добавить(ПолучитьСтруктуруРольТекст("user", ОписаниеЗапросаПользователя));
			
		ИначеЕсли ПереключательРежимов = "Чат" Тогда
			
			Если messagesПользователяJson = "" Тогда
				messagesПользователяМассив.Добавить(ПолучитьСтруктуруРольТекст("user", ОписаниеЗапросаПользователя));
				messagesПользователяJson = КоллекциюВJson(messagesПользователяМассив);
			Иначе
				messagesПользователяМассив = JsonВКоллекцию(messagesПользователяJson, Ложь);
				messagesПользователяМассив.Добавить(JsonВКоллекцию(messageАссистентаJson, Ложь));
				messagesПользователяМассив.Добавить(ПолучитьСтруктуруРольТекст("user", ОписаниеЗапросаПользователя));
				messagesПользователяJson = КоллекциюВJson(messagesПользователяМассив);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ПереключательМоделей = "КраткийПересказ" Тогда
		messagesПользователяМассив.Добавить(ПолучитьСтруктуруРольТекст("user", ОписаниеЗапросаПользователя));
	КонецЕсли;

	СтруктураДанных.Вставить("messages", messagesПользователяМассив);
	
КонецФункции

&НаКлиенте
Функция СформироватьHTTPСоединениеЗапрос(АдресРесурса, ЭтоАвторизация = Ложь)

	Попытка
		Если ЭтоАвторизация Тогда
			Соединение = Новый HTTPСоединение("iam.api.cloud.yandex.net", 443, , , , , Новый ЗащищенноеСоединениеOpenSSL);
		Иначе
			Соединение = Новый HTTPСоединение("llm.api.cloud.yandex.net", 443, , , , , Новый ЗащищенноеСоединениеOpenSSL);
		КонецЕсли;
	Исключение
		ОписаниеОтветаНейросети = ОписаниеОшибки();
		Возврат Неопределено;
	КонецПопытки;
	
	Запрос = Новый HTTPЗапрос(АдресРесурса);
	
	Если Не ЛогироватьЗапросы Тогда
		Запрос.Заголовки.Вставить("x-data-logging-enabled", Ложь);
	КонецЕсли;
	
	Возврат Новый Структура("Запрос, Соединение", Запрос, Соединение);

КонецФункции

&НаКлиенте
Функция ВыполнитьЗапрос(ИмяМетода, Соединение, Запрос)

	Попытка
		Ответ = Соединение.ВызватьHTTPМетод(ИмяМетода, Запрос);
	Исключение
		ОписаниеОтветаНейросети = ОписаниеОшибки();
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

&НаКлиенте
Процедура РазобратьОтветКомандыCompletion(СтруктураДанных)

	result = Неопределено;
	СтруктураДанных.Свойство("result", result);
	
	alternatives = Неопределено;
	result.Свойство("alternatives", alternatives);
	result.Свойство("modelVersion", modelVersion);
	
	usage = Неопределено;
	result.Свойство("usage", usage);
	ЗаполнитьЗначенияСвойств(ЭтаФорма, usage);

	РазобратьМассивAlternatives(alternatives);
	
КонецПроцедуры

&НаКлиенте
Процедура РазобратьОтветКомандыСompletionAsync(JsonСтрока)	

	ОтветКомандыСompletionAsync = JsonСтрока;
	
	СтруктураОтвета = JsonВКоллекцию(ОтветКомандыСompletionAsync, Ложь);
	СтруктураОтвета.Свойство("id", id);
	
	ОписаниеОтветаНейросети = JsonСтрока;
	
КонецПроцедуры

&НаКлиенте
Процедура РазобратьМассивAlternatives(Массив, ЭтоМассивСоответствий = Ложь)

	messageАссистента = Неопределено;
	
	Если Не ЭтоМассивСоответствий Тогда
		
		Если ТипЗнч(Массив) = Тип("Массив") И Массив.Количество() > 0 Тогда
			Для каждого Структура Из Массив Цикл
				Структура.Свойство("message", messageАссистента);
				Структура.Свойство("status", status);			
			КонецЦикла;
		КонецЕсли;
		ОписаниеОтветаНейросети = messageАссистента.text;
	Иначе
		
		Если ТипЗнч(Массив) = Тип("Массив") И Массив.Количество() > 0 Тогда
			Для каждого Соответствие Из Массив Цикл
				messageАссистента = Соответствие.Получить("message");
				status = Соответствие.Получить("status");			
			КонецЦикла;
		КонецЕсли;
		ОписаниеОтветаНейросети = messageАссистента.Получить("text");
	КонецЕсли;
	
	Если ПереключательРежимов = "Чат" Тогда
		messageАссистентаJson = КоллекциюВJson(messageАссистента)
	КонецЕсли;
		
КонецПроцедуры
	
#КонецОбласти











