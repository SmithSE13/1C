#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	НастройкиРеквизитовПоУмолчанию();
	НастроитьЭлементыФормы();
	УстановитьЗначенияРеквизитовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	СохранитьУдалитьФайлыНастроек();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПутьДляСохраненияФайлаНастроекОткрытие(Элемент, СтандартнаяОбработка)
	
	ЗапуститьПриложениеАсинх(ПутьДляСохраненияФайлаНастроек);
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьДляСохраненияФайлаТелаЗапросаОткрытие(Элемент, СтандартнаяОбработка)
	
	ЗапуститьПриложениеАсинх(ПутьДляСохраненияФайлаТелаЗапроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательМоделейПриИзменении(Элемент)
	
	НастроитьЭлементыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательРежимовПриИзменении(Элемент)
	
	НастроитьЭлементыФормы();
	ОчиститьРеквизитыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательКомандПриИзменении(Элемент)
	
	Если ПереключательКоманд = "completionAsync" Тогда
		
		ПереключательРежимов = "Промт";
		ПереключательМоделей = "YandexGPTLite";
		
	КонецЕсли;
	
	НастроитьЭлементыФормы();
	ОчиститьРеквизитыФормы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПолучитьIAMТокен(Команда)
	
	СоединениеЗапрос = КонструкторHTTPСоединениеЗапрос("/iam/v1/tokens", Истина);
	
	Запрос = СоединениеЗапрос.Запрос;
	
	Токен = Новый Структура("yandexPassportOauthToken", Объект.OAuthТокен);
	Токен = КоллекциюВJson(Токен);
	
	Запрос.УстановитьТелоИзСтроки(Токен);
	Запрос.Заголовки.Вставить("Content-Type", "application/json");
	
	Ответ = ВыполнитьЗапрос("POST", СоединениеЗапрос.Соединение, Запрос);
	
	ОшибкаВыполненияЗапроса = (Ответ = Неопределено);
	
	Если ОшибкаВыполненияЗапроса Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтрокаОтвета = Ответ.ПолучитьТелоКакСтроку();
	
	Если Ответ.КодСостояния <> 200 Тогда
		
		ОписаниеОтветаНейросети = СтрокаОтвета;
		
		Возврат;
		
	КонецЕсли;
	
	Данные = JsonВКоллекцию(СтрокаОтвета, Ложь);
	Данные.Свойство("iamToken", Объект.IAMТокен);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьOAuthТокен(Команда)
	
	ЗапуститьПриложениеАсинх("https://oauth.yandex.ru/authorize?response_type=token&client_id=1a6990aa636648e9b2ef855fa7bec2fb");
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ЗапроситьОтвет(Команда)
	
	ОчиститьСообщения();
	
	Если Не ПроверитьЗаполнение() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ПереключательРежимов = "" Тогда
		
		ПереключательРежимов = "Промт";
		
	КонецЕсли;
	
	НастроитьЭлементыФормы();
	Элементы.ГруппаОсновныеНастройкиМоделиГенерации.Скрыть();
	
	СоединениеЗапрос = КонструкторHTTPСоединениеЗапрос("/foundationModels/v1/" + ПереключательКоманд);
	
	Запрос = СоединениеЗапрос.Запрос;
		
	ФайлПодготовлен = Ждать ЗаполнитьФайлТелаЗапроса();
	
	Если Не ФайлПодготовлен Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не удалось подготовить файл тела запроса.";
		Сообщение.Поле = "ПутьДляСохраненияФайлаТелаЗапроса";
		Сообщение.УстановитьДанные(ПутьДляСохраненияФайлаТелаЗапроса);
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;

	Запрос.УстановитьТелоИзДвоичныхДанных(Новый ДвоичныеДанные(ПутьДляСохраненияФайлаТелаЗапроса));
	Запрос.Заголовки.Вставить("Content-Type", "application/json");
	Запрос.Заголовки.Вставить("Authorization", "Bearer " + Объект.IAMТокен);
	
	Ответ = ВыполнитьЗапрос("POST", СоединениеЗапрос.Соединение, Запрос);
	Если Ответ = Неопределено Тогда
		Возврат;
	ИначеЕсли Ответ.КодСостояния <> 200 Тогда
		ОписаниеОтветаНейросети = Ответ.ПолучитьТелоКакСтроку();
		Возврат;
	КонецЕсли;
	
	Если ПереключательКоманд = "completion" Тогда
		РазобратьОтветКомандыCompletion(JsonВКоллекцию(Ответ.ПолучитьТелоКакСтроку(), Ложь));
	ИначеЕсли ПереключательКоманд = "completionAsync" Тогда
		РазобратьОтветКомандыСompletionAsync(Ответ.ПолучитьТелоКакСтроку());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапросНаПолучениеИнформацииОбОперации(Команда)
	
	Если ОтветКомандыСompletionAsync = "" Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Сначала сделайте запрос.";
		Сообщение.Поле = "ОписаниеЗапросаПользователя";
		Сообщение.УстановитьДанные(ОписаниеЗапросаПользователя);
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	СтруктураСоединениеЗапрос = КонструкторHTTPСоединениеЗапрос("/operations/" + id);
	Если СтруктураСоединениеЗапрос = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Запрос = СтруктураСоединениеЗапрос.Запрос;
	Запрос.Заголовки.Вставить("Authorization", "Bearer " + Объект.IAMТокен);
	
	Ответ = ВыполнитьЗапрос("POST", СтруктураСоединениеЗапрос.Соединение, Запрос);
	Если Ответ = Неопределено Тогда
		Возврат;
	ИначеЕсли Ответ.КодСостояния <> 200 Тогда
		ОписаниеОтветаНейросети = Ответ.ПолучитьТелоКакСтроку();
		Возврат;
	КонецЕсли;

	СоответствиеОтвета = JsonВКоллекцию(Ответ.ПолучитьТелоКакСтроку(), Ложь, Истина);
	done = СоответствиеОтвета.Получить("done");
	Если done = Истина Тогда
		response = СоответствиеОтвета.Получить("response");
		Если response <> Неопределено Тогда
			РазобратьМассивAlternatives(response.Получить("alternatives"), Истина);
		Иначе
			error = СоответствиеОтвета.Получить("error");
			ОписаниеОтветаНейросети = ?(error <> Неопределено, error.Получить("message"), 
												"<Ответ не определён. Необходимо проверить API.>");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Асинх Процедура НастройкиРеквизитовПоУмолчанию()
	
	УстановитьНастройкиМоделиГенерации("YandexGPTLite", "Промт", "completion");
	
	Ждать УстановитьПутиСохраненияФайлов(Ждать КаталогВременныхФайловАсинх(),
										"телоЗапроса",
										"сохраненныеДанные");
	
	ПрочитатьНастройки();
	
КонецПроцедуры // НастройкиПоУмолчанию()

&НаКлиенте
Процедура УстановитьНастройкиМоделиГенерации(Модель, Режим, Команда)
	
	ПереключательМоделей = Модель;
	ПереключательРежимов = Режим;
	ПереключательКоманд = Команда;
	
КонецПроцедуры

&НаКлиенте
Асинх Функция УстановитьПутиСохраненияФайлов(Каталог, ИмяФайлаТелаЗапроса, ИмяФайлаНастроек)
	
	ПутьДляСохраненияФайлаТелаЗапроса = Ждать СтрШаблон("%1%2.json", Каталог, ИмяФайлаТелаЗапроса);
	ПутьДляСохраненияФайлаНастроек 	  = Ждать СтрШаблон("%1%2.json", Каталог, ИмяФайлаНастроек);
	
КонецФункции

&НаКлиенте
Асинх Процедура ПрочитатьНастройки()
	
	ФайлСуществует = Ждать ФайлСуществует(ПутьДляСохраненияФайлаНастроек);
	
	Если Не ФайлСуществует Тогда
		
		temperature = 0.1;
		maxTokens = "1000";
		
		Возврат;
		
	КонецЕсли;
	
	Настройки = JsonВКоллекцию(ПутьДляСохраненияФайлаНастроек, Истина);
	ЗаполнитьЗначенияСвойств(Объект, Настройки);
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Настройки);
	
КонецПроцедуры

&НаКлиенте
Асинх Функция ФайлСуществует(ИмяФайла)
	
	Файл = Новый Файл(ИмяФайла);
	ФайлСуществует = Ждать Файл.СуществуетАсинх();
	
	Возврат ФайлСуществует;
	
КонецФункции

&НаКлиенте
Функция JsonВКоллекцию(JSON, ЭтоФайл, ВСоответствие = Ложь)

	ЧтениеJSON = Новый ЧтениеJSON;
	
	Если ЭтоФайл Тогда
		
		ЧтениеJSON.ОткрытьФайл(JSON);
		
	Иначе
		
		ЧтениеJSON.УстановитьСтроку(JSON);
		
	КонецЕсли;
	
	Коллекция = ПрочитатьJSON(ЧтениеJSON, ВСоответствие);
	
	ЧтениеJSON.Закрыть();
	
	Возврат Коллекция;
	
КонецФункции

&НаКлиенте
Процедура НастроитьЭлементыФормы()
	
	ГруппаАвторизацииПоказатьСкрыть();
	УстановитьЗаголовкиЭлементов();
	УстановитьДоступностьЭлементов();
	УстановитьВидимостьЭлементов();
	
	Если ПереключательМоделей = "КраткийПересказ" Тогда
		
		ПереключательРежимов = "";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаАвторизацииПоказатьСкрыть()
	
	Если ДанныеАвторизацииЗаполнены() Тогда
		
		Элементы.ГруппаАвторизация.Скрыть();
		
	Иначе
		
		Элементы.ГруппаАвторизация.Показать();
		
	КонецЕсли;
	
КонецПроцедуры // ГруппаАвторизацииПоказатьСкрыть()

&НаКлиенте
Функция ДанныеАвторизацииЗаполнены()
	
	Возврат ЗначениеЗаполнено(Объект.ИдентификаторКаталога)
		И ЗначениеЗаполнено(Объект.OAuthТокен)
		И ЗначениеЗаполнено(Объект.IAMТокен);
	
КонецФункции // ДанныеАвторизацииЗаполнены()

&НаКлиенте
Процедура УстановитьЗаголовкиЭлементов()
	
	Если ПереключательМоделей = "YandexGPTLite" Тогда
		
		ОписаниеЗапросаПользователяЗаголовок = "Запрос пользователя";
		ДекорацияРежимЗаголовок = Элементы.ПереключательРежимов.СписокВыбора.НайтиПоЗначению(ПереключательРежимов);
		
	Иначе
		
		ОписаниеЗапросаПользователяЗаголовок = "Статья к пересказу";
		ДекорацияРежимЗаголовок = "";
		
	КонецЕсли;
	
	Элементы.ОписаниеЗапросаПользователя.Заголовок = ОписаниеЗапросаПользователяЗаголовок;
	Элементы.ДекорацияМодель.Заголовок = Элементы.ПереключательМоделей.СписокВыбора.НайтиПоЗначению(ПереключательМоделей);
	Элементы.ДекорацияРежим.Заголовок = ДекорацияРежимЗаголовок;
	Элементы.ДекорацияКоманда.Заголовок = Элементы.ПереключательКоманд.СписокВыбора.НайтиПоЗначению(ПереключательКоманд);
	
КонецПроцедуры // УстановитьЗаголовкиЭлементов()

&НаКлиенте
Процедура УстановитьДоступностьЭлементов()
	
	Если ПереключательМоделей = "YandexGPTLite" Тогда
		
		Элементы.ПереключательМоделей.Доступность = Не ПереключательКоманд = "completionAsync";
		Элементы.ПереключательРежимов.Доступность = Не ПереключательКоманд = "completionAsync";
		
	Иначе
		
		Элементы.ПереключательРежимов.Доступность = Ложь;
		
	КонецЕсли;

КонецПроцедуры // УстановитьДоступностьЭлементов()

&НаКлиенте
Процедура УстановитьВидимостьЭлементов()
	
	Элементы.ЗадачаДляНейросети.Видимость = (ПереключательМоделей = "YandexGPTLite");
	Элементы.ГруппаАсинхронно.Видимость = (ПереключательКоманд = "completionAsync");
	Элементы.ГруппаПараметры.Видимость = (Не ПереключательКоманд = "completionAsync");
	
КонецПроцедуры // УстановитьВидимостьЭлементов()

&НаКлиенте
Процедура УстановитьЗначенияРеквизитовФормы()
	
	СброситьПереключательРежимов();
	
КонецПроцедуры // УстановитьЗначенияРеквизитовФормы()

&НаКлиенте
Процедура СброситьПереключательРежимов()
	
	Если ПереключательМоделей = "КраткийПересказ" Тогда
		
		ПереключательРежимов = "";
		
	КонецЕсли;
	
КонецПроцедуры // СброситьПереключательРежимов()

&НаКлиенте
Асинх Процедура СохранитьУдалитьФайлыНастроек()
	
	Если СохранитьНастройкиПодключения() Тогда
		
		СохранитьФайлНастроекПодключения();
		
	Иначе
		
		УдалитьФайлНастроекПодключения();
		
	КонецЕсли;
	
	Если Не СохранитьТелоЗапроса() Тогда
		
		УдалитьФайлТелаЗапроса();
		
	КонецЕсли;
	
КонецПроцедуры // СохранитьУдалитьНастройки()

&НаКлиенте
Функция КонструкторHTTPСоединениеЗапрос(АдресРесурса, ЭтоАвторизация = Ложь)
	
	HTTPСоединениеЗапрос = Новый Структура;
	HTTPСоединениеЗапрос.Вставить("Запрос", Неопределено);
	HTTPСоединениеЗапрос.Вставить("Соединение", Неопределено);
	
	АдресСевера = "llm.api.cloud.yandex.net";
	
	Если ЭтоАвторизация Тогда
		
		АдресСевера = "iam.api.cloud.yandex.net";
		
	КонецЕсли;
	
	Попытка
		
		Соединение = Новый HTTPСоединение(АдресСевера, 443, , , , , Новый ЗащищенноеСоединениеOpenSSL);
		
	Исключение
		
		ОписаниеОтветаНейросети = ОписаниеОшибки();
		
		Возврат HTTPСоединениеЗапрос;
		
	КонецПопытки;
	
	Запрос = Новый HTTPЗапрос(АдресРесурса);
	Запрос.Заголовки.Вставить("x-data-logging-enabled", ЛогироватьЗапросы);
	
	HTTPСоединениеЗапрос.Вставить("Запрос", Запрос);
	HTTPСоединениеЗапрос.Вставить("Соединение", Соединение);
	
	Возврат HTTPСоединениеЗапрос;
	
КонецФункции

&НаКлиенте
Асинх Функция СохранитьНастройкиПодключения()
	
	СохранитьНастройкиПодключения = ВсегдаСохранятьНастройки;
	
	ЗадатьВопросОСохранениеНайстроекВФайл = Не ВсегдаСохранятьНастройки;
	
	Если ЗадатьВопросОСохранениеНайстроекВФайл Тогда
		
		СохранитьНастройкиПодключения = Ждать ВопросАсинх("Сохранить настройки подключения?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да
		
	КонецЕсли;
	
	Возврат СохранитьНастройкиПодключения;
	
КонецФункции // СохранитьНастройки()

&НаКлиенте
Процедура СохранитьФайлНастроекПодключения()

	Структура = Новый Структура;
	Структура.Вставить("ИдентификаторКаталога", Объект.ИдентификаторКаталога);
	Структура.Вставить("OAuthТокен", Объект.OAuthТокен);
	Структура.Вставить("IAMТокен", Объект.IAMТокен);
	Структура.Вставить("ЗадачаДляНейросети", Объект.ЗадачаДляНейросети);
	
	Структура.Вставить("ВсегдаСохранятьНастройки", ВсегдаСохранятьНастройки);
	
	Структура.Вставить("temperature", temperature);
	Структура.Вставить("stream", stream);
	Структура.Вставить("maxTokens", maxTokens);
	Структура.Вставить("ЛогироватьЗапросы", ЛогироватьЗапросы);
	
	Структура.Вставить("ПереключательМоделей", ПереключательМоделей);
	Структура.Вставить("ПереключательРежимов", ПереключательРежимов);
	Структура.Вставить("ПереключательКоманд", ПереключательКоманд);
	
	КоллекциюВJson(Структура, Истина, ПутьДляСохраненияФайлаНастроек);

КонецПроцедуры

&НаКлиенте
Асинх Процедура УдалитьФайлНастроекПодключения()
	
	Если Ждать ФайлСуществует(ПутьДляСохраненияФайлаНастроек) Тогда
		
		УдалитьФайлыАсинх(ПутьДляСохраненияФайлаНастроек);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Асинх Функция СохранитьТелоЗапроса()
	
	СохранитьТелоЗапроса = ВсегдаСохранятьНастройки;
	
	ЗадатьВопросОСохраненииТелаЗапроса = Не ВсегдаСохранятьНастройки;
	
	Если ЗадатьВопросОСохраненииТелаЗапроса Тогда
		
		СохранитьТелоЗапроса = Ждать ВопросАсинх("Сохранить файл тела запроса?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да
		
	КонецЕсли;
	
	Возврат СохранитьТелоЗапроса;
	
КонецФункции // СохранитьНастройки()

&НаКлиенте
Асинх Процедура УдалитьФайлТелаЗапроса()
	
	Если Ждать ФайлСуществует(ПутьДляСохраненияФайлаТелаЗапроса) Тогда
		
		УдалитьФайлыАсинх(ПутьДляСохраненияФайлаТелаЗапроса);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция КоллекциюВJson(Коллекция, ЗаписьВФайл = Ложь, ИмяФайла = "")
	
	ЗаписьJSON = Новый ЗаписьJSON;
	
	Если ЗаписьВФайл Тогда
		
		ЗаписьJSON.ОткрытьФайл(ИмяФайла);
		
	Иначе
		
		ЗаписьJSON.УстановитьСтроку();
		
	КонецЕсли;
	
	ЗаписатьJSON(ЗаписьJSON, Коллекция);
		
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

&НаКлиенте
Асинх Функция ЗаполнитьФайлТелаЗапроса()

	Данные = ДанныеСompletionOptions(Новый Структура);
	
	СформироватьMessages(Данные);
	
	Ждать КоллекциюВJson(Данные, Истина, ПутьДляСохраненияФайлаТелаЗапроса);
	
	Возврат Ждать ФайлСуществует(ПутьДляСохраненияФайлаТелаЗапроса);
	
КонецФункции

&НаКлиенте
Процедура ОчиститьРеквизитыФормы()
	
	ОписаниеЗапросаПользователя = "";
	ОписаниеОтветаНейросети = "";
	ОтветКомандыСompletionAsync = "";	
	messagesПользователяJson = "";
	messageАссистентаJson = "";
	
КонецПроцедуры

&НаКлиенте
Функция ДанныеСompletionOptions(Структура)
	
	Если ПереключательМоделей = "YandexGPTLite" Тогда
		
		МодельСтрокаUri = "/yandexgpt-lite";
		
	ИначеЕсли ПереключательМоделей = "КраткийПересказ" Тогда
		
		МодельСтрокаUri = "/summarization";
		
	КонецЕсли;
	
	Структура.Вставить("modelUri", "gpt://" + Объект.ИдентификаторКаталога + МодельСтрокаUri);
	Структура.Вставить("completionOptions", Новый Структура("stream, temperature, maxTokens", stream, temperature, maxTokens));
	
	Возврат Структура; 
	
КонецФункции

&НаКлиенте
Функция ПолучитьСтруктуруРольТекст(Роль, Текст)
	
	Возврат Новый Структура("role, text", Роль, Текст);
	
КонецФункции

&НаКлиенте
Функция СформироватьMessages(СтруктураДанных)
	
	messagesПользователяМассив = Новый Массив;
	
	Если ПереключательМоделей = "YandexGPTLite" Тогда
		
		messagesПользователяМассив.Добавить(ПолучитьСтруктуруРольТекст("system", Объект.ЗадачаДляНейросети));
		
		Если ПереключательРежимов = "Промт" Тогда
			
			messagesПользователяМассив.Добавить(ПолучитьСтруктуруРольТекст("user", ОписаниеЗапросаПользователя));
			
		ИначеЕсли ПереключательРежимов = "Чат" Тогда
			
			Если messagesПользователяJson = "" Тогда
				messagesПользователяМассив.Добавить(ПолучитьСтруктуруРольТекст("user", ОписаниеЗапросаПользователя));
				messagesПользователяJson = КоллекциюВJson(messagesПользователяМассив);
			Иначе
				messagesПользователяМассив = JsonВКоллекцию(messagesПользователяJson, Ложь);
				messagesПользователяМассив.Добавить(JsonВКоллекцию(messageАссистентаJson, Ложь));
				messagesПользователяМассив.Добавить(ПолучитьСтруктуруРольТекст("user", ОписаниеЗапросаПользователя));
				messagesПользователяJson = КоллекциюВJson(messagesПользователяМассив);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ПереключательМоделей = "КраткийПересказ" Тогда
		messagesПользователяМассив.Добавить(ПолучитьСтруктуруРольТекст("user", ОписаниеЗапросаПользователя));
	КонецЕсли;
	
	СтруктураДанных.Вставить("messages", messagesПользователяМассив);
	
КонецФункции

&НаКлиенте
Функция ВыполнитьЗапрос(ИмяМетода, Соединение, Запрос)
	
	Попытка
		
		Ответ = Соединение.ВызватьHTTPМетод(ИмяМетода, Запрос);
		
	Исключение
		
		ОписаниеОтветаНейросети = ОписаниеОшибки();
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

&НаКлиенте
Процедура РазобратьОтветКомандыCompletion(СтруктураДанных)

	result = Неопределено;
	СтруктураДанных.Свойство("result", result);
	
	alternatives = Неопределено;
	result.Свойство("alternatives", alternatives);
	result.Свойство("modelVersion", modelVersion);
	
	usage = Неопределено;
	result.Свойство("usage", usage);
	ЗаполнитьЗначенияСвойств(ЭтаФорма, usage);

	РазобратьМассивAlternatives(alternatives);
	
КонецПроцедуры

&НаКлиенте
Процедура РазобратьОтветКомандыСompletionAsync(JsonСтрока)	
	
	ОтветКомандыСompletionAsync = JsonСтрока;
	
	СтруктураОтвета = JsonВКоллекцию(ОтветКомандыСompletionAsync, Ложь);
	СтруктураОтвета.Свойство("id", id);
	
	ОписаниеОтветаНейросети = JsonСтрока;
	
КонецПроцедуры

&НаКлиенте
Процедура РазобратьМассивAlternatives(Массив, ЭтоМассивСоответствий = Ложь)
	
	messageАссистента = Неопределено;
	
	Если Не ЭтоМассивСоответствий Тогда
		
		Если ТипЗнч(Массив) = Тип("Массив") И Массив.Количество() > 0 Тогда
			Для каждого Структура Из Массив Цикл
				Структура.Свойство("message", messageАссистента);
				Структура.Свойство("status", status);			
			КонецЦикла;
		КонецЕсли;
		ОписаниеОтветаНейросети = messageАссистента.text;
	Иначе
		
		Если ТипЗнч(Массив) = Тип("Массив") И Массив.Количество() > 0 Тогда
			Для каждого Соответствие Из Массив Цикл
				messageАссистента = Соответствие.Получить("message");
				status = Соответствие.Получить("status");			
			КонецЦикла;
		КонецЕсли;
		ОписаниеОтветаНейросети = messageАссистента.Получить("text");
	КонецЕсли;
	
	Если ПереключательРежимов = "Чат" Тогда
		messageАссистентаJson = КоллекциюВJson(messageАссистента)
	КонецЕсли;
		
КонецПроцедуры
	
#КонецОбласти

